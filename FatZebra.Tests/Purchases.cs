using System;
using System.Text;
using System.Collections.Generic;
using NUnit.Framework;
using FatZebra;
using Newtonsoft.Json;

namespace FatZebra.Tests
{
    [TestFixture]
    public class Purchases
    {
        [TestFixtureSetUp]
        public void Init()
        {
            FatZebra.Gateway.Username = "TEST";
            FatZebra.Gateway.Token = "TEST";
            Gateway.SandboxMode = true;
            Gateway.TestMode = true;
        }

        [Test]
        public void PurchaseShouldBeSuccessful()
        {
            var response = Purchase.Create(120, "M Smith", "5123456789012346", DateTime.Now.AddYears(1), "123", Guid.NewGuid().ToString(), "123.0.0.1");
            Assert.IsTrue(response.Successful);
            Assert.IsTrue(response.Result.Successful);
            Assert.IsNotNull(response.Result.ID);
            Assert.AreEqual(response.Errors.Count, 0);
            Assert.AreEqual(((Purchase)response.Result).Amount, 120);

            Assert.AreEqual(((Purchase)response.Result).DecimalAmount, 1.20);

            Assert.AreEqual(((Purchase)response.Result).CardType, "MasterCard");
        }

        [Test]
        public void PurchaseShouldReturnErrors()
        {
            var response = Purchase.Create(120, "M Smith", "", DateTime.Now.AddYears(1), "123", Guid.NewGuid().ToString(), "123.0.0.1");
            Assert.IsFalse(response.Successful);
            Assert.IsFalse(response.Result.Successful);
            Assert.IsNull(response.Result.ID);
            Assert.GreaterOrEqual(response.Errors.Count, 1);
        }

        [Test]
        public void PurchaseWithTokenShouldBeSuccessful()
        {
            var card = CreditCard.Create("M SMith", "5123456789012346", DateTime.Now.AddYears(1), "123");
            Assert.IsTrue(card.Successful);
            var response = Purchase.Create(123, card.Result.ID, "123", Guid.NewGuid().ToString(), "123.123.123.1");

            Assert.IsTrue(response.Successful);
            Assert.IsTrue(response.Result.Successful);
            Assert.IsNotNull(response.Result.ID);
            Assert.AreEqual(response.Errors.Count, 0);
            Assert.AreEqual(((Purchase)response.Result).Amount, 123);

            Assert.AreEqual(((Purchase)response.Result).DecimalAmount, 1.23);

            Assert.AreEqual(((Purchase)response.Result).CardType, "MasterCard");
        }

		[Test]
		public void PurchaseWithFraudCheckShouldBeSuccessful()
		{
			FraudCheck fc = new FraudCheck ();
			fc.DeviceID = "abcd1234"; // Will be generated by the deviceID JS library
			fc.Customer.ID = "ABD123";
			fc.Customer.FirstName = "James";
			fc.Customer.LastName = "Smith";
			fc.Customer.Email = "accept@email.com";
			fc.Customer.DOB = DateTime.Today.AddYears (-20);
			fc.Customer.AddressLine1 = "23 Smith Road";
			fc.Customer.City = "Canberra";
			fc.Customer.PostCode = "2600";
			fc.Customer.Country = "AUS";
			fc.Customer.HomePhone = "0421858999";
			fc.Customer.ExistingCustomer = true;
			fc.Customer.CreatedAt = DateTime.Now;

			fc.ShippingAddress.FirstName = "James";
			fc.ShippingAddress.LastName = "Smith";
			fc.ShippingAddress.Email = "accept@email.com";
			fc.ShippingAddress.AddressLine1 = "23 Smith Road";
			fc.ShippingAddress.City = "Canberra";
			fc.ShippingAddress.PostCode = "2600";
			fc.ShippingAddress.Country = "AUS";
			fc.ShippingAddress.HomePhone = "0421858999";
			fc.ShippingAddress.ShipMethod = ShippingMethod.Express;

			var item = new OrderItem ();
			item.ProductCode = "9999-A";
			item.SKU = "9999";
			item.Description = "Widgets";
			item.ItemCost = 23.30f;
			item.LineTotal = 23.30f;
			item.Quantity = 1;

			fc.OrderItems.Add (item);

			var recip = new Recipient ();
			recip.FirstName = "James";
			recip.LastName = "Smith";
			recip.Email = "james@smith.com";
			recip.AddressLine1 = "1 Fairfield Road";
			recip.City = "Austin";
			recip.State = "TX";
			recip.PostCode = "55555-1234";
			recip.Country = "USA";
			recip.PhoneNumber = "555-555-55555";

			fc.Recipients.Add (recip);

			var response = Purchase.Create(120, "M Smith", "5123456789012346", DateTime.Now.AddYears(1), "123", Guid.NewGuid().ToString(), "123.0.0.1", "AUD", fc);
			Assert.IsTrue(response.Successful);
			Assert.IsTrue(response.Result.Successful);
			Assert.IsNotNull(response.Result.ID);
			Assert.AreEqual(response.Errors.Count, 0);
			Assert.AreEqual(response.Result.Amount, 120);

			Assert.AreEqual(response.Result.DecimalAmount, 1.20);

			Assert.AreEqual(response.Result.CardType, "MasterCard");
			Assert.AreEqual(response.Result.FraudCheckResult, FraudResult.Unknown);
		}

		[Test]
		public void ResponseParsing() 
		{
			string payload = "{\"successful\":true,\"response\":{\"authorization\":1400645846,\"id\":\"071-P-KCE1UEL7\",\"card_number\":\"512345XXXXXX2346\",\"card_holder\":\"M Smith\",\"card_expiry\":\"2015-05-31\",\"card_token\":\"hhyzk1va\",\"amount\":120,\"decimal_amount\":1.2,\"successful\":true,\"message\":\"Approved\",\"reference\":\"5f57a4d4-494e-419c-86f1-b97af1ac3ca6\",\"currency\":\"AUD\",\"transaction_id\":\"071-P-KCE1UEL7\",\"settlement_date\":\"2014-05-22\",\"transaction_date\":\"2014-05-21T14:17:26+10:00\",\"response_code\":\"00\",\"captured\":true,\"captured_amount\":120},\"errors\":[\"Test PurchaseShouldReturnErrors\"],\"test\":true}";
			var x = JsonConvert.DeserializeObject<Response<Purchase>> (payload);

			Assert.IsTrue(x.Successful);
		}
    }
}
